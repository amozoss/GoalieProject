package com.willoughby.goalie.db.generated;

import android.graphics.Color;
import android.support.v7.appcompat.R;

import java.util.List;

import com.willoughby.goalie.HasId;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table HABITUAL_GOAL.
 */
public class HabitualGoal implements HasId<Long> {

    private Long id;
    private String color;
    private Integer defaultCellType;
    private java.util.Date dueDate;
    private Integer goal;
    private Float priority;
    private java.util.Date startDate;
    private java.util.Date taskCompleted;
    /** Not-null value. */
    private String title;
    private String type;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HabitualGoalDao myDao;

    private List<DailyGoal> dailyGoals;
    private List<Reminder> reminders;
    private List<RepeatDay> repeatDays;
    private List<WeeklyGoal> weeklyGoals;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public HabitualGoal() {
    }

    public HabitualGoal(Long id) {
        this.id = id;
    }

    public HabitualGoal(Long id, String color, Integer defaultCellType, java.util.Date dueDate, Integer goal, Float priority, java.util.Date startDate, java.util.Date taskCompleted, String title, String type) {
        this.id = id;
        this.color = color;
        this.defaultCellType = defaultCellType;
        this.dueDate = dueDate;
        this.goal = goal;
        this.priority = priority;
        this.startDate = startDate;
        this.taskCompleted = taskCompleted;
        this.title = title;
        this.type = type;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHabitualGoalDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public Integer getDefaultCellType() {
        return defaultCellType;
    }

    public void setDefaultCellType(Integer defaultCellType) {
        this.defaultCellType = defaultCellType;
    }

    public java.util.Date getDueDate() {
        return dueDate;
    }

    public void setDueDate(java.util.Date dueDate) {
        this.dueDate = dueDate;
    }

    public Integer getGoal() {
        return goal;
    }

    public void setGoal(Integer goal) {
        this.goal = goal;
    }

    public Float getPriority() {
        return priority;
    }

    public void setPriority(Float priority) {
        this.priority = priority;
    }

    public java.util.Date getStartDate() {
        return startDate;
    }

    public void setStartDate(java.util.Date startDate) {
        this.startDate = startDate;
    }

    public java.util.Date getTaskCompleted() {
        return taskCompleted;
    }

    public void setTaskCompleted(java.util.Date taskCompleted) {
        this.taskCompleted = taskCompleted;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DailyGoal> getDailyGoals() {
        if (dailyGoals == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DailyGoalDao targetDao = daoSession.getDailyGoalDao();
            List<DailyGoal> dailyGoalsNew = targetDao._queryHabitualGoal_DailyGoals(id);
            synchronized (this) {
                if(dailyGoals == null) {
                    dailyGoals = dailyGoalsNew;
                }
            }
        }
        return dailyGoals;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDailyGoals() {
        dailyGoals = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Reminder> getReminders() {
        if (reminders == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ReminderDao targetDao = daoSession.getReminderDao();
            List<Reminder> remindersNew = targetDao._queryHabitualGoal_Reminders(id);
            synchronized (this) {
                if(reminders == null) {
                    reminders = remindersNew;
                }
            }
        }
        return reminders;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetReminders() {
        reminders = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RepeatDay> getRepeatDays() {
        if (repeatDays == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RepeatDayDao targetDao = daoSession.getRepeatDayDao();
            List<RepeatDay> repeatDaysNew = targetDao._queryHabitualGoal_RepeatDays(id);
            synchronized (this) {
                if(repeatDays == null) {
                    repeatDays = repeatDaysNew;
                }
            }
        }
        return repeatDays;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRepeatDays() {
        repeatDays = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<WeeklyGoal> getWeeklyGoals() {
        if (weeklyGoals == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WeeklyGoalDao targetDao = daoSession.getWeeklyGoalDao();
            List<WeeklyGoal> weeklyGoalsNew = targetDao._queryHabitualGoal_WeeklyGoals(id);
            synchronized (this) {
                if(weeklyGoals == null) {
                    weeklyGoals = weeklyGoalsNew;
                }
            }
        }
        return weeklyGoals;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetWeeklyGoals() {
        weeklyGoals = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public String toString()
    {
        return title;
    }


    public int getPriorityColor(float priority) {

        int c = 0;
        if (priority <= 1.0) {
            c =  Color.GREEN;
        }
        else if (priority <= 2.0) {
            c =  Color.YELLOW;
        }
        else if (priority <= 3.0) {
            c =  Color.RED;
        }

        return c;
    }

    public String getPriorityString(float priority) {

        String s = null;
        if (priority <= 1.0) {
            s = "Low";
        }
        else if (priority <= 2.0) {
            s = "Med";
        }
        else if (priority <= 3.0) {
            s = "High";
        }

        return s;
    }
    // KEEP METHODS END

}
