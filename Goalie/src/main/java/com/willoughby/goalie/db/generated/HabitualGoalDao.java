package com.willoughby.goalie.db.generated;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HABITUAL_GOAL.
*/
public class HabitualGoalDao extends AbstractDao<HabitualGoal, Long> {

    public static final String TABLENAME = "HABITUAL_GOAL";

    /**
     * Properties of entity HabitualGoal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Color = new Property(1, String.class, "color", false, "COLOR");
        public final static Property DefaultCellType = new Property(2, Integer.class, "defaultCellType", false, "DEFAULT_CELL_TYPE");
        public final static Property DueDate = new Property(3, java.util.Date.class, "dueDate", false, "DUE_DATE");
        public final static Property Goal = new Property(4, Integer.class, "goal", false, "GOAL");
        public final static Property Priority = new Property(5, Float.class, "priority", false, "PRIORITY");
        public final static Property StartDate = new Property(6, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property TaskCompleted = new Property(7, java.util.Date.class, "taskCompleted", false, "TASK_COMPLETED");
        public final static Property Title = new Property(8, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(9, String.class, "type", false, "TYPE");
    };

    private DaoSession daoSession;


    public HabitualGoalDao(DaoConfig config) {
        super(config);
    }
    
    public HabitualGoalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HABITUAL_GOAL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'COLOR' TEXT," + // 1: color
                "'DEFAULT_CELL_TYPE' INTEGER," + // 2: defaultCellType
                "'DUE_DATE' INTEGER," + // 3: dueDate
                "'GOAL' INTEGER," + // 4: goal
                "'PRIORITY' REAL," + // 5: priority
                "'START_DATE' INTEGER," + // 6: startDate
                "'TASK_COMPLETED' INTEGER," + // 7: taskCompleted
                "'TITLE' TEXT NOT NULL ," + // 8: title
                "'TYPE' TEXT);"); // 9: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HABITUAL_GOAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HabitualGoal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(2, color);
        }
 
        Integer defaultCellType = entity.getDefaultCellType();
        if (defaultCellType != null) {
            stmt.bindLong(3, defaultCellType);
        }
 
        java.util.Date dueDate = entity.getDueDate();
        if (dueDate != null) {
            stmt.bindLong(4, dueDate.getTime());
        }
 
        Integer goal = entity.getGoal();
        if (goal != null) {
            stmt.bindLong(5, goal);
        }
 
        Float priority = entity.getPriority();
        if (priority != null) {
            stmt.bindDouble(6, priority);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(7, startDate.getTime());
        }
 
        java.util.Date taskCompleted = entity.getTaskCompleted();
        if (taskCompleted != null) {
            stmt.bindLong(8, taskCompleted.getTime());
        }
        stmt.bindString(9, entity.getTitle());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
    }

    @Override
    protected void attachEntity(HabitualGoal entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HabitualGoal readEntity(Cursor cursor, int offset) {
        HabitualGoal entity = new HabitualGoal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // color
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // defaultCellType
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // dueDate
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // goal
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // priority
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // startDate
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // taskCompleted
            cursor.getString(offset + 8), // title
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HabitualGoal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setColor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDefaultCellType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDueDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setGoal(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPriority(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setStartDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setTaskCompleted(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setTitle(cursor.getString(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HabitualGoal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HabitualGoal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
